---
// src/components/CodeEditor.astro
interface Props {
  id?: string;
  initialContent?: string;
  initialLanguage?: string;
  height?: string;
  width?: string;
}

const {
  id, 
  initialContent = "",
  initialLanguage = "plaintext",
  height = "auto",
  width = "100%"
} = Astro.props;

const componentId = id || "editor-" + Math.random().toString(36).substring(2, 9);
const IDS = [`${componentId}-content`, `${componentId}-lang`];
---

<div class="code-editor-container" style={`height: ${height}; width: ${width};`}>
  <div class="code-editor-header">
    <div class="language-indicator" id={`${componentId}-language`}>{initialLanguage}</div>
  </div>
  <pre class="code-editor-wrapper">
    <code class="code-editor" id={componentId} data-language={initialLanguage}>{initialContent}</code>
  </pre>
</div>

<script define:vars={{ componentId, initialContent, initialLanguage, IDS }}>
  window.EditorConfig = {
    componentId,
    initialContent,
    initialLanguage,
    IDS
  };
</script>

<script>
  import { signals } from "src/globalSignals"; 
  import hljs from 'highlight.js';

  interface EditorConfigData {
    componentId: string;
    initialContent: string;
    initialLanguage: string;
    IDS: string[];
  }



  const {
    componentId,
    initialContent,
    initialLanguage,
    IDS
  } = window.EditorConfig;

  const typedSignals = signals;


  function initSignals(): void {
    if (!IDS || IDS.length < 2) {
      console.error("IDS not properly initialized for signals.");
      return;
    }
    typedSignals.create<string>(IDS[0], (initialContent || "") as string);
    typedSignals.create<string>(IDS[1], (initialLanguage || "plaintext") as string);
    console.log("Signals initialized for IDS:", IDS);
  }
  initSignals();


  class CodeEditor {
    private editorElement: HTMLElement | null;
    private languageIndicator: HTMLElement | null;
    private initialContent: string;
    private initialLanguage: string;
    private debouncedUpdateHighlight: () => void;

    constructor(editorId: string, initialContent: string = "", initialLanguage: string = "plaintext") {
      this.editorElement = document.getElementById(editorId);
      this.languageIndicator = document.getElementById(`${editorId}-language`);
      this.initialContent = initialContent;
      this.initialLanguage = initialLanguage;

      if (this.editorElement) {
        this.initializeEditor();
      } else {
        console.error(`Editor element with ID '${editorId}' not found.`);
      }
      this.debouncedUpdateHighlight = this.debounce(this.updateHighlight.bind(this), 300);
    }

    private initializeEditor(): void {
      if (!this.editorElement) return;

      this.editorElement.contentEditable = "true"; 
      this.editorElement.spellcheck = false;
      (this.editorElement as HTMLElement).autocapitalize = "off"; 

      this.setContent(this.initialContent);

      this.editorElement.addEventListener('input', this.handleInput.bind(this) as EventListener);
      this.editorElement.addEventListener('paste', this.handlePaste.bind(this) as EventListener);
      this.editorElement.addEventListener('keydown', this.handleTabKey.bind(this) as EventListener);

      if (IDS && IDS.length >= 2) {
        typedSignals.subscribe<string>(IDS[0], (newContent: string) => {
          if (this.editorElement && this.editorElement.textContent !== newContent) {
            this.setContent(newContent);
          }
        });

        typedSignals.subscribe<string>(IDS[1], (newLanguage: string) => {
          if (this.languageIndicator) {
            this.languageIndicator.textContent = newLanguage;
          }
          this.updateHighlight(); 
        });
      }
    }

    private debounce<F extends (...args: any[]) => any>(func: F, wait: number): (...args: Parameters<F>) => void {
      let timeout: ReturnType<typeof setTimeout> | undefined;
      return function(this: ThisParameterType<F>, ...args: Parameters<F>): void {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
      };
    }

    private saveCursorPosition(element: Node): number {
      const selection = window.getSelection();
      let cursorPosition = 0;
      if (selection && selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const preCaretRange = range.cloneRange();
        preCaretRange.selectNodeContents(element);
        preCaretRange.setEnd(range.endContainer, range.endOffset);
        cursorPosition = preCaretRange.toString().length;
      }
      return cursorPosition;
    }

    private restoreCursorPosition(element: Node, cursorPosition: number): void {
      const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT);
      let currentPos = 0;
      let targetNode: Node | null = null;
      let targetOffset = 0;

      let currentNode: Node | null;
      while (currentNode = walker.nextNode()) {
        const nodeLength = currentNode.textContent?.length || 0;

        if (currentPos + nodeLength >= cursorPosition) {
          targetNode = currentNode;
          targetOffset = cursorPosition - currentPos;
          break;
        }
        currentPos += nodeLength;
      }

      if (targetNode) {
        try {
          const range = document.createRange();
          range.setStart(targetNode, targetOffset);
          range.collapse(true);
          const selection = window.getSelection();
          if (selection) {
            selection.removeAllRanges();
            selection.addRange(range);
          }
        } catch (e) {
          console.error("Error restoring cursor position:", e);
          const range = document.createRange();
          range.selectNodeContents(element);
          range.collapse(false);
           const selection = window.getSelection();
          if (selection) {
            selection.removeAllRanges();
            selection.addRange(range);
          }
        }
      }
    }

    private updateHighlight(): void {
      console.log("updateHighlight");
      if (!this.editorElement) return;
      if (!IDS || IDS.length < 2) return;

      const cursorPosition = this.saveCursorPosition(this.editorElement);
      const content = this.editorElement.textContent || "";

      typedSignals.set<string>(IDS[0], content);

      let result; 
      const currentLangSignal = typedSignals.get<string>(IDS[1]);
      const currentLang = currentLangSignal ? currentLangSignal.value : "plaintext";


      if (currentLang && currentLang !== 'plaintext' && hljs.getLanguage(currentLang)) {
        try {
          result = hljs.highlight(content, { language: currentLang, ignoreIllegals: true });
        } catch (e) {
          console.warn(`Highlighting failed for language ${currentLang}, falling back to auto-detection.`, e);
          result = hljs.highlightAuto(content);
        }
      } else {
        result = hljs.highlightAuto(content);
      }

      this.editorElement.innerHTML = result.value;

      if (result.language && result.language !== currentLang) {
        typedSignals.set<string>(IDS[1], result.language);
      }
      signals.set<string>(IDS[0], content);
      
      this.restoreCursorPosition(this.editorElement, cursorPosition);
    }

    private handlePaste(event: ClipboardEvent): void {
      event.preventDefault();
      const text = event.clipboardData?.getData('text/plain') || "";

      const selection = window.getSelection();
      if (selection && selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        range.insertNode(document.createTextNode(text));
        range.setStart(range.endContainer, range.endOffset);
        range.collapse(true);
        selection.removeAllRanges();
        selection.addRange(range);
      }
      this.updateHighlight();
    }
    private handleInput(event: Event): void {
      this.debouncedUpdateHighlight();
    }
    private handleTabKey(event: KeyboardEvent): void {
      if (event.key === 'Tab') {
        event.preventDefault();
        document.execCommand('insertText', false, '  ');
        this.debouncedUpdateHighlight();
      }
    }

    public getContent(): string {
      if (!IDS || IDS.length < 1) return "";
      const contentSignal = typedSignals.get<string>(IDS[0]);
      return contentSignal ? contentSignal.value : (this.editorElement?.textContent || "");
    }

    public getLanguage(): string {
      if (!IDS || IDS.length < 2) return this.initialLanguage;
      const langSignal = typedSignals.get<string>(IDS[1]);
      return langSignal ? langSignal.value : this.initialLanguage;
    }

    public setContent(content: string): void {
      if (!this.editorElement) return;
      if (!IDS || IDS.length < 1) return;

      if (this.editorElement.textContent === content) {
          if (content.trim() === "" && this.editorElement.innerHTML !== "") {
          } else {
            return;
          }
      }

      if (!content || content.trim() === "") {
        this.editorElement.innerHTML = "";
        typedSignals.set<string>(IDS[0], "");
      } else {
        this.editorElement.textContent = content;
        this.updateHighlight();
      }
    }

    public reset(): void {
      if (!IDS || IDS.length < 2) return;
      this.setContent(this.initialContent);
      typedSignals.set<string>(IDS[1], this.initialLanguage);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (window.EditorConfig && IDS && IDS.length >= 2) {
      const editorInstance = new CodeEditor(
        (componentId || "file-editor"),
        initialContent,
        initialLanguage
      );
      console.log("CodeEditor instance created:", editorInstance, "for componentId:", componentId);
    } else {
      console.error("Failed to initialize CodeEditor: EditorConfig or IDS are missing/invalid.", window.EditorConfig);
    }
  });
</script>
<style>
  .code-editor-container {
    display: flex;
    flex-direction: column;
    border-radius: 8px;
    overflow: hidden;
    background-color: #1e1e1e;
    font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
    max-height: 90dvh;
    max-width: 90dvw;
  }

  .code-editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 16px;
    background-color: #2d2d2d;
    border-bottom: 1px solid #3e3e3e;
  }

  .language-indicator {
    font-size: 0.9em;
    color: #e0e0e0;
    text-transform: lowercase;
    font-weight: 500;
    background-color: #3e3e3e;
    padding: 2px 8px;
    border-radius: 4px;
  }

  .editor-controls {
    display: flex;
    gap: 8px;
  }

  .copy-button {
    background-color: #4a4a4a;
    color: #e0e0e0;
    border: none;
    padding: 4px 10px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.85em;
    transition: background-color 0.2s, transform 0.1s;
  }

  .copy-button:hover {
    background-color: #5a5a5a;
  }

  .copy-button:active {
    transform: scale(0.95);
  }

  .code-editor-wrapper {
    display: flex;
    flex: 1;
    margin: 0;
    overflow: auto;
    padding: 16px;
    height: calc(100% - 45px);
    overflow-y: scroll;
  }

  .code-editor {
    outline: none;
    white-space: pre;
    tab-size: 2;
    hyphens: none;
    min-height: 100%;
    font-size: 14px;
    line-height: 1.5;
    width: 100%;
  }

  .code-editor-wrapper::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  .code-editor-wrapper::-webkit-scrollbar-thumb {
    background: #4a4a4a;
    border-radius: 5px;
  }

  .code-editor-wrapper::-webkit-scrollbar-track {
    background: #2d2d2d;
  }

  .code-editor-wrapper {
    scrollbar-width: thin;
    scrollbar-color: #4a4a4a #2d2d2d;
  }
</style>