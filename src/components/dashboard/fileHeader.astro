---
import CPopup from "@components/solid/solid.tsx";
import PathNavigator from "@components/solid/PathNavigator.tsx";
import CodeEditor from "@components/dashboard/CodeEditor.astro";
---

<script src="/src/litcomponents/mcinit.js"></script>
<div class="content-header">
    <action-buttons-lit id="FileActions"></action-buttons-lit>
</div>
<p id="current-path">Current Path: ./</p>
<PathNavigator client:only="solid-js" />
<file-explorer current-path="/" id="filemanager"></file-explorer>
<CPopup id="fileOptions" class="file-options" client:load />
<dialog-container id="file-Editor">
    <div class="modal__base">
      <c-input type="text" name="name" id="file-name" placeholder="Nombre del archivo" required style="--padding: 0; border: 0; background-color: var(--bg-dark-accent-light);"></c-input>
<!--       <c-input type="textarea" name="content" id="file-content" placeholder="Contenido del archivo"  required style="--padding: 0; border: 0; background-color: var(--bg-dark-accent);"></c-input>
 -->
      <CodeEditor 
        id="fileEditor" 
        initialContent="" 
        initialLanguage="json"
      />
      <div class="actions-bg flex center p-2">
            <button class="btn btn-primary" id="save-file">Guardar</button>
            <button class="btn btn-primary" id="cancel-file">Cancelar</button>
        </div>
    </div>
</dialog-container>
<script>
    import { ActionButtonsLit } from "src/litcomponents/mc/barstatus.js";
    import { filemanagerapi } from "src/fetch/fetchapi";
    import {
        FileExplorer,
        type ItemMenuEventDetail,
        type FileSystemItem,
    } from "src/litcomponents/mc/files.js";
    import { DialogContainer } from "src/litcomponents/custom-modal.js";
    import { optionsModal, setPopupOptions } from "src/utils/dropdown.js";
    import { pathSignal, signals } from "src/globalSignals";
    type ValidAction =
        | "start"
        | "stop"
        | "restart"
        | "send"
        | "log"
        | "info"
        | "players"
        | "metrics"
        | "kill";
    const filemanager = document.getElementById(
        "filemanager",
    ) as FileExplorer | null;
    const filepopup = document.getElementById("fileOptions");
    const newFile = document.getElementById("file-Editor") as DialogContainer;

    document.addEventListener("DOMContentLoaded", function () {
        const filename = signals.create<string>("file-name", "test.txt");
        const actionsElement = document.getElementById("FileActions");
        if (!actionsElement) return;
        if (!(actionsElement instanceof ActionButtonsLit)) return;
        initListener();
        initMFilelisteners();
        // Initial buttons
        const buttonsConfig = [
            {
                id: "new-file",
                label: "{{create}} {{file}}",
                icon: "add_circle",
                action: "new-file",
            },
            {
                id: "upload-file",
                label: "{{uploadFile}}",
                icon: "upload_file",
                action: "upload-file",
                iconOnly: true,
            },
            {
                id: "new-folder",
                label: "{{create}} {{folder}}",
                icon: "create_new_folder",
                action: "new-folder",
                iconOnly: true,
            },
            {
                id: "refresh-folder",
                label: "{{refresh}}",
                icon: "refresh",
                action: "refresh-folder",
                iconOnly: true,
            },
        ];
        buttonsConfig.forEach((button) => {
            actionsElement.addButton(button);
        });

        actionsElement.addEventListener("button-clicked", (event) => {
            if (!("detail" in event)) return;
            if (!(event instanceof CustomEvent)) return;
            const isValidEvent = buttonsConfig.find(
                (button) => button.id === event.detail.id,
            );
            console.log("isValidEvent", isValidEvent);
            if (isValidEvent) {
                switch (event.detail.id) {
                    case buttonsConfig[0].id:
                        newFile.show();
                        break;
                    case buttonsConfig[1].id:
                        break;
                    case buttonsConfig[2].id:
                        break;
                    case buttonsConfig[3].id:
                        refreshFolder();
                        break;
                    default:
                        console.log(
                            "Button clicked:",
                            event.detail,
                            isValidEvent,
                        );
                        break;
                }
            }
        });
    });
    refreshFolder();
    async function fetchFiles(path: string) {
        const pathENCODED = encodeURIComponent(path);
        const result = await filemanagerapi.getFolderInfo(pathENCODED);
        console.log("result", result);
        if (result && result.data) {
            if (!filemanager) return;
            filemanager.data = result.data?.files;
            filemanager.currentPath = path;
        }
    }
    async function readFile(path: string) {
        const pathENCODED = encodeURIComponent(path);
        const result = await filemanagerapi.readFileByPath(pathENCODED);
        console.log("result", result);
        if (result && result.data) {
            return result.data;
        }
        return false;
    }
    async function initListener() {
        const events = ["selected", "menu", "updated"];
        events.forEach((Evname) => {
            if (!filemanager) return;
            (filemanager as FileExplorer).addEventListener(Evname,async (e) => {
                console.log("event", Evname, e, typeof e);
                if (!("detail" in e)) return;
                const { data, event } = e.detail as ItemMenuEventDetail;
                if (Evname === "selected") {
                    if (data.type !== "directory") {
                        newFile.show();
                        //const editorContent = signals.set("fileEditor-content", "text=false");
                        //const editorLang = signals.set("fileEditor-lang", "plaintext");
                        const fileData = await readFile(window.selectedServer + "/" + data.path);
                        if (!fileData) return;
                        signals.set("fileEditor-content", fileData);
                        signals.set("file-name", data.path);
                        //console.log("fileData", fileData,editorContent);
                        return;
                    }
                    pathSignal.value = window.selectedServer + "/" + data.path;
                    //    fetchFiles(window.selectedServer + "/" + data.path);
                } else if (Evname === "menu") {
                    const popupOptions = getOptions(data);
                    console.log("menu", data, event);
                    setPopupOptions(filepopup, popupOptions, event);
                } else if (Evname === "updated") {
                    pathSignal.value = data;
                }
            });
            signals.subscribe<string>(
                "path",
                (value: string, oldValue: string) => {
                    console.log("pathSignal", value, oldValue);
                    //    fetchFiles(value);
                    if (value !== oldValue) fetchFiles(value);
                },
            );
        });
    }
    async function refreshFolder() {
        console.log("refreshFolder");
        fetchFiles(window.selectedServer);
    }
    function getOptions(data: FileSystemItem) {
        // Definir opciones individuales
        const downloadOption = {
            html: optionsModal({
                id: "download-file",
                icon: "download",
                text: "Download File",
            }),
            callback: function () {
                console.log("Option 1 clicked");
            },
        };

        const renameOption = {
            html: optionsModal({
                id: "rename-file",
                icon: "bookmark_manager",
                text: "Rename File",
            }),
            callback: function () {
                console.log("Option 2 clicked");
            },
        };

        const deleteOption = {
            html: optionsModal({
                id: "delete-file",
                icon: "delete",
                text: "Delete File",
            }),
            callback: function () {
                console.log("Option 3 clicked");
            },
        };

        // Determinar qué opciones incluir basándose en data.isDirectory u otras condiciones
        const options = [];

        if (!data.isDirectory) {
            options.push(downloadOption);
        }

        // Estas opciones están disponibles para ambos tipos
        options.push(renameOption);
        options.push(deleteOption);

        return options;
    }
    async function initMFilelisteners() {
        const MF_actions = ["save-file", "cancel-file"];
        const MF_elements: Record<string, HTMLButtonElement> = {};
        MF_actions.forEach((action:string) => {
            const element = document.getElementById(action) as HTMLButtonElement;
            if (element) {
                MF_elements[action] = element;
                element.addEventListener("click", async (e) => {
                    console.log("MF_action", action);
                    if (action === "save-file") {
                        const fileData = signals.get("fileEditor-content")?.value;
                        console.log("fileData", fileData);
                        if (!fileData) return;
                        const result = await filemanagerapi.writeFile({
                            directoryname: window.selectedServer,
                            filename: signals.get("file-name")?.value,
                            content: fileData,
                        });
                        console.log("result", result);
                    }
                    if (action === "cancel-file") {
                        newFile.hide();
                    }
                });
            }
        });
        console.log("MF_elements", MF_elements);
    }
</script>
<style>
    .content-header {
        width: 100%;
        height: max-content;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, auto));
        gap: 1rem;
    }
    .content-header .actions {
        justify-self: center;
        align-self: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .actions-bg {
        background-color: var(--bg-dark-accent-lighter);
        gap: 8px;
    }
</style>
