---
import type { Server } from 'src/types/server';
import StatusIndicator from './StatusIndicator.astro';

interface Props {
  server: Server;
}

const { server } = Astro.props;
---
<custom-popup class="serverModal_0">
</custom-popup>
<div class="server-card">
  <div class="p-10 m-auto">
    <server-item
    data-server="server-01"
    data-size="1048576"
    data-version="1.2.3"
    data-modified="2023-05-15"
    data-status="active"
    icon="/favicon.svg"
    title="Production Server">
    <!-- Contenido personalizado para el slot -->
     <div class="flex center">
       <StatusIndicator status="stopped" />
       <button class="more-options">
         <span class="material-symbols-rounded">more_vert</span>
       </button>
     </div>
    </server-item>
  </div>
  
  <div class="server-details">
    <div class="server-metrics">
      <div class="metric">
        <p class="metric-label">Players Online</p>
        <p class="metric-value">{server.players}</p>
      </div>
      <div class="metric">
        <p class="metric-label">Uptime</p>
        <p class="metric-value">{server.uptime}</p>
      </div>
      <div class="metric">
        <p class="metric-label">Size</p>
        <p class="metric-value">{server.size}</p>
      </div>
      <div class="metric">
        <p class="metric-label">Ping</p>
        <p class="metric-value ping">{server.ping}</p>
      </div>
    </div>
    
    <div class="server-controls">
      <button class="btn btn-primary">
        <span class="material-symbols-rounded">play_arrow</span>
        Start
      </button>
      <button class="btn btn-outline">
        <span class="material-symbols-rounded">backup</span>
        Backup
      </button>
      <button class="btn btn-outline">
        <span class="material-symbols-rounded">settings</span>
        Settings
      </button>
    </div>
  </div>
</div>
<script define:vars={{ server }}>
  console.log("Server", server);
  document.querySelectorAll('server-item').forEach(element => {
    element.addEventListener('selected', function(e) {
      console.log("selected", e.detail);
    });
    element.addEventListener('menu', function(e) {
      console.log("menu", e.detail);
      const cpopup = document.querySelector('custom-popup');
      const options = getOptions();
      cpopup.setOptions(options);
      if (cpopup) {
        cpopup.show(e.detail.event);
      }
    });
  });
  function getOptions() {
    const options = [
      {
        html: "<div>Option 1</div>",
        callback: function(event) {
          console.log("Option 1 clicked");
        }
      },
      {
        html: "<div>Option 2</div>",
        callback: function(event) {
          console.log("Option 2 clicked");
        }
      }
    ]
    return options;
  }
  document.addEventListener('DOMContentLoaded', function() {
  });
</script>
<style>
  .server-card {
    background-color: var(--color-dark-900);
    border: 1px solid var(--color-gray-800);
    border-radius: var(--border-radius-xl);
    overflow: hidden;
    margin-bottom: var(--space-6);
  }
  
  .server-info {
    display: flex;
    align-items: center;
    gap: var(--space-3);
  }
  
  .server-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--color-dark-800);
    padding: var(--space-2);
    border-radius: var(--border-radius-lg);
  }
  
  .server-icon span {
    font-size: 2rem;
    color: var(--color-primary-500);
  }
  
  .server-title h3 {
    font-size: var(--font-size-lg);
    font-weight: 600;
  }
  
  .server-type {
    font-size: var(--font-size-sm);
    color: var(--color-gray-400);
  }
  
  .server-actions {
    display: flex;
    align-items: center;
    gap: var(--space-4);
  }
  
  .more-options {
    color: var(--color-gray-400);
    transition: color 0.2s ease;
  }
  
  .more-options:hover {
    color: var(--color-white);
  }
  
  .server-details {
    background-color: var(--color-dark-800);
    border-radius: var(--border-radius-lg);
    margin: 0 var(--space-6) var(--space-6);
    padding: var(--space-4);
  }
  
  .server-metrics {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-4);
    margin-bottom: var(--space-4);
  }
  
  @media (min-width: 768px) {
    .server-metrics {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  
  .metric-label {
    font-size: var(--font-size-sm);
    color: var(--color-gray-400);
    margin-bottom: var(--space-1);
  }
  
  .metric-value {
    font-weight: 600;
  }
  
  .metric-value.ping {
    color: var(--color-green-500);
  }
  
  .server-controls {
    display: flex;
    gap: var(--space-2);
  }
  
  .server-controls .btn {
    flex: 1;
    justify-content: center;
    font-size: var(--font-size-sm);
  }
  
  @media (max-width: 480px) {
    .server-controls {
      flex-direction: column;
    }
  }
</style>