---
import type { Server } from 'src/types/server';
import StatusIndicator from './StatusIndicator.astro';
import CPopup from '../solid/solid.tsx';
interface Props {
  server: Server;
}

const { server } = Astro.props;
---

<div class="server-card">
  <div class="p-10 m-auto">
    <server-item
    id={server.id}
    data-server={server.name}
    data-size={server.size}
    data-version={server.version}
    data-modified={server.lastModified}
    data-status={server.status}
    icon="/favicon.svg"
    title={server.name}
    >
    <!-- Contenido personalizado para el slot -->
     <div class="flex center">
       <StatusIndicator status={server.status} />
       <button class="more-options">
         <span class="material-symbols-rounded">more_vert</span>
       </button>
     </div>
    </server-item>
  </div>
</div>
<CPopup id="serverOptions" class="serverModal_0 material-symbols-rounded server-card" client:load />
<script define:vars={{ server }}>
  console.log("server", server);
</script>
<script>
  import { type EDetails } from 'src/litcomponents/mc/serveritem.js';
  interface OptionModal {
      icon: string;
      text: string;
      id?:string;
      class?: {
          font?: string;
          container?: string;
      };
  }

  const optionsModal = (option: OptionModal) => {
      return /*html*/ `
  <div class="${option.class?.container || 'dropdown-item'}" ${option.id ? `id="${option.id}"` : ''}>
    <span class="material-symbols-rounded">${option.icon}</span>
    <span class="${option.class?.font || 'default-font'}">${option.text}</span>
  </div>`;
  };

  const popup = document.getElementById('serverOptions');
  document.querySelectorAll('server-item').forEach(element => {
      element.addEventListener('selected', function(e) {
        if (!('detail' in e)) return;
        if (!(e instanceof CustomEvent)) return;
        window.location.href = `/${e.detail.data.server}/console`;
      });

      element.addEventListener('menu', function(e) {
        if (!('detail' in e)) return;
        const detail = (e as CustomEvent).detail as EDetails;
        console.log("menu", detail);
        
        // Initialize popup with options
        if (popup && 'setOptions' in popup) {
          // Use the component methods directly
          (popup as any).setOptions(getOptions(detail));
          (popup as any).show(detail.event);
        } else {
          // Fallback to window.solidComponents
          const solidPopup = (window as any).solidComponents?.serverOptions;
          if (solidPopup) {
            solidPopup.setOptions(getOptions(detail));
            solidPopup.show(detail.event);
          }
        }
      });
    });
  
  function getOptions({data}: EDetails) {
    const options = [
      {
        html: optionsModal({id:"create-backup",icon:"backup",text:"Create Backup"}),
        callback: function() {
          console.log("Option 1 clicked");
        }
      },
      {
        html: optionsModal({id:"restore-backup",icon:"restore",text:"Restore Backup"}),
        callback: function() {
          console.log("Option 2 clicked");
        }
      },
      {
        html: optionsModal({id:"delete-server",icon:"delete",text:"Delete Server"}),
        callback: function() {
          console.log("Option 3 clicked");
        }
      },
      {
        html: optionsModal({id:"download-server",icon:"download",text:"Download Server"}),
        callback: function() {
          console.log("Option 4 clicked");
        }
      },
    ]
    return options;
  }
  document.addEventListener('DOMContentLoaded', function() {
  });
</script>
<style>
  .server-card {
    background-color: var(--color-dark-900);
    border: 1px solid var(--color-gray-800);
    border-radius: var(--border-radius-xl);
    overflow: hidden;
    margin-bottom: var(--space-6);
  }
  
</style>