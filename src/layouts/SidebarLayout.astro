---
import { pagesConfigA, pagesConfigB } from '../config/pages';
import 'src/styles/global.css';
interface Props {
  title?: string;
  activeConfig?: 'A' | 'B';
  prefix?: string;
}

const { title = "Default Title", activeConfig = 'A', prefix = '/' } = Astro.props;
const currentConfig = activeConfig === 'A' ? pagesConfigA : pagesConfigB;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- REMOVE Font Awesome -->
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" /> -->

    <!-- ADD Material Symbols (usando tu CSS local o el CDN de Google) -->
    <!-- Opción 1: Usando tu CSS local (asegúrate que esté bien configurado) -->
    <link rel="stylesheet" href="/materialSymbols.css" />
    <link rel="stylesheet" href="/global.css">
    <!-- Opción 2: Usando el CDN de Google (más común y auto-contenido) -->
    <!-- Descomenta esta línea si prefieres el CDN y comenta la anterior -->
    <!-- <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" /> -->

    <meta name="color-scheme" content="light dark" /> {/* Important for auto-theming */}
    <script src="/src/litcomponents/init"></script>
    <title>{title}</title>
  </head>
  <dialog-container id="ActionDialog">
    <div class="modal__container">
      <input type="color" name="color" id="color-picker" value="#ffffff">
    </div>
  </dialog-container>
  <body>
    <div class="layout">
      {/* Mobile Navbar */}
      <nav class="mobile-nav">
        <div class="nav-content">
          <div class="logo">
            <slot name="logo" />
          </div>
          <div class="nav-buttons">
            {
              Object.entries(currentConfig).map(([key, page]) => (
              <a href={`/${page.slot.replace(/^\/+/, '')}`} class="nav-link" id="NavigatePath">
                  {/* CHANGE: Usar span con la clase y el nombre del icono como contenido */}
                  <span class="material-symbols-outlined">{page.icon}</span>
                  <span class="nav-text">{page.name}</span>
                </a>
              ))
            }
          </div>
          <div class="login-mobile">
            
          </div>
        </div>
      </nav>

      {/* Desktop Sidebar */}
      <aside class="sidebar">
        <div class="sidebar-content">
          <div class="logo">
            <slot name="logo" />
          </div>
          <div class="nav-buttons">
            {
              Object.entries(currentConfig).map(([key, page]) => (
              <a href={`/${page.slot.replace(/^\/+/, '')}`} class="nav-link" id="NavigatePath">
                  {/* CHANGE: Usar span con la clase y el nombre del icono como contenido */}
                  <span class="material-symbols-outlined">{page.icon}</span>
                  <span class="nav-text">{page.name}</span>
                </a>
              ))
            }
          </div>
          <div class="login-desktop">
          </div>
        </div>
      </aside>

      {/* Main Content */}
      <main class="main-content">
        <slot />
      </main>
      <button class="float-btn" onclick="document.getElementById('ActionDialog').show()">
        <span class="material-symbols-outlined">
          view_headline
        </span>
      </button>
    </div>
  </body>
</html>
<script define:vars={{prefix,currentConfig}}>
	const params = new URLSearchParams(window.location.search);
	const server = params.get("server");
  window.selectedServer = server || "";
	console.log("server", server);
  const aLinks = document.querySelectorAll("#NavigatePath");
  aLinks.forEach((element)=>{
    element.addEventListener("click", (e) => {
      console.log("e", prefix, element.href,window.location);
      e.preventDefault();
      window.location.href = element.href + "?server=" + window.selectedServer;
    }
    );
  });
</script>
<script>
  import wsClient from '../utils/socketManager';
  wsClient.connect({
    onOpen: (event:string | Event) => {
      console.log("Conexión WS establecida desde el componente.", event);
    },
    onMessage: (message:string, rawData:any) => {
      console.log("Mensaje recibido desde el componente:", message, rawData);
    },
    onClose: (event:string | CloseEvent) => {
      console.log("Conexión WS cerrada desde el componente:", event);
    }
  });
</script>
<style>

</style>