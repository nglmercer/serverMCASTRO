---
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro Basics</title>
		<link rel="stylesheet" href="/global.css">
		<script src="/src/litcomponents/init.ts"></script>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
		<link rel="stylesheet" href="/materialSymbols.css"/>
	</head>
	<body>
		<task-notifications id="my-notifications"></task-notifications>
		<slot />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
<script>
import { TaskNotifications } from "src/litcomponents/notify";
import { serverapi } from "src/utils/fetch/fetchapi";
import { type TasksObject } from 'src/types/task';
import { scheduleUpdate } from "src/fetch/request";
import { getBackups } from '@components/main/backups/backup.js'
interface wsMessage {
  event: string;
  data: any;
}
import wsClient from '../utils/socketManager';
  wsClient.connect({
    onOpen: (event:string) => {
      console.log("Conexión WS establecida desde el componente.", event);
    },
    onMessage: (message:wsMessage, rawData:string) => {
      console.log("Mensaje recibido desde el componente:", message);
      if (!message || !message.event) return;
      if (message.event.startsWith("task")) {
        scheduleUpdate(async()=>{
          try {
          await updateNotifications();
        } catch (error) {
          console.error("Error al actualizar notificaciones:", error);
        }
        });
      }
    },
    onClose: (event:string) => {
      console.log("Conexión WS cerrada desde el componente:", event);
    }
  });
const notifications = document.querySelector("task-notifications") as TaskNotifications;
document.addEventListener("DOMContentLoaded",()=>{
	console.log(notifications)
});
function isTasksObject(obj: any): obj is TasksObject {
  return typeof obj === 'object' && obj !== null && Object.values(obj).every(value => typeof value !== 'undefined');
}

async function updateNotifications() {
  const result = await serverapi.getTasks();
  if (!notifications)return;
  if (isTasksObject(result.data)) {
    console.log("result.data", result.data);
    notifications.updateTasks(result.data);
	const esVacio = Object.keys(result.data).length === 0 && result.data.constructor === Object;
	if (esVacio){
		getBackups();
	}
  } else {
    console.error("Datos inesperados recibidos en result.data", result.data);
  }
}
</script>