---
 
import ServerLayout from "@layouts/serverLayout.astro";
import Inputcommand from "@components/dashboard/inputcommand.astro";
---

<script src="src/litcomponents/mcinit.ts"></script>
<ServerLayout title={"console"} activeConfig="A">
    <div class="console-layout">
        <div class="console">
            <game-console> </game-console>
        </div>
        <div class="input">
            <Inputcommand />
        </div>
        <div class="settings flex center gap-10">
            <circle-progress
                id="cpu-progress"
                value="75"
                radius="120"
                active-color="#ff5722"
                center-color="transparent"
                strokeWidth="16"
                bg-color="#eeeeee"
            > 
        </circle-progress>
        <div id="cpu-text"> CPU </div>
            <circle-progress
                id="ram-progress"
                value="75"
                radius="120"
                active-color="#ff5722"
                center-color="transparent"
                strokeWidth="16"
                bg-color="#eeeeee"
            >
            </circle-progress>
            <div id="ram-text"> RAM </div>
<!--             <circle-progress
                id="storage-progress"
                value="75"
                radius="120"
                active-color="#ff5722"
                center-color="transparent"
                strokeWidth="16"
                bg-color="#eeeeee"
            >
            </circle-progress> -->
        </div>
    </div>
</ServerLayout>

<style>
    .console-layout {
        margin-top: 16px;
        width: 100%;
        height: 100%;

        display: grid;
        grid-template-columns: 1fr max-content;
        grid-template-rows: 1fr max-content;
        grid-auto-columns: 1fr;
        gap: 0.7em 1.3em;
        grid-auto-flow: row;
        grid-template-areas:
            "console settings"
            "input settings";
    }

    .console-layout .console {
        grid-area: console;
        width: 100%;
        height: 100%;
        background: var(--bg-dark-accent);
        border-radius: 10px;
        padding: 12px;
        overflow-y: auto;
    }

    .console-layout .console * {
        font-family: "Roboto Mono", monospace, sans-serif;
        font-size: 11pt;
    }

    .console-layout .input {
        grid-area: input;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .console-layout .input button {
        height: 48px;
    }

    .console-layout .input input {
        flex-grow: 1;
        margin-right: 8px;
        height: 48px;
    }

    .console-layout .settings {
        grid-area: settings;
        display: flex;
        flex-direction: column;
    }
    @media (max-width: 768px) {
        .console-layout {
            grid-template-areas:
                "console"
                "input"
                "settings";
        }
        .settings {
            flex-direction: row !important;
        }
    }   
</style>
<script>
    import { systemapi } from "src/fetch/fetchapi";
    import { CircleProgress } from "@litcomponents/mc/circle-progress"
    document.addEventListener("DOMContentLoaded",async ()=>{
        initializegraphs();
    })
    async function initializegraphs() {
        const result = await systemapi.getResources()
        console.log("result",result)
        if (result && result.data){
            const {cpu,ram} = result.data;
            setResources("ram",ram.percent)
            setResources("cpu",cpu)
        }
    }
    const ResourceElements: {
    [key: string]: string;
    } = {
    ram: "ram-progress",
    cpu: "cpu-progress"
    };
    function setResources(id:string,number:number){
        const validID = ResourceElements[id]
        if (!id || !validID)return;
        const element = document.getElementById(validID) as CircleProgress;
        element.setValue(number)
        element.setActiveColor(getProgressiveColor(number))
    }
    function getProgressiveColor(percent: number): string {
        // Limitar el rango entre 0 y 100
        percent = Math.max(0, Math.min(100, percent));

        // Convertir el porcentaje en un valor entre 0 (verde) y 1 (rojo)
        const ratio = percent / 100;

        // InterpolaciÃ³n lineal entre verde (0,255,0) y rojo (255,0,0)
        const r = Math.round(255 * ratio);
        const g = Math.round(255 * (1 - ratio));
        const b = 0; // No usamos azul

        // Convertir a color hexadecimal
        const toHex = (value: number) => value.toString(16).padStart(2, "0");
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
    }

    setInterval(()=>{
        initializegraphs()
    },6000)
</script>