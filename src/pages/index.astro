---

import Layout from '@layouts/Layout.astro';
import SystemStatus from '@components/main/SystemStatus.astro';
import ServerStatistics from '@components/main/ServerStatistics.astro';
import QuickActions from '@components/main/QuickActions.astro';
import PerformanceAlert from '@components/main/PerformanceAlert.astro';
import ServerCard from '@components/main/ServerCard.astro';
import RecentBackups from '@components/main/RecentBackups.astro';
import SystemHealth from '@components/main/SystemHealth.astro';
import type { Server, SystemMetrics, QuickAction } from '../types/server';
import { serverapi } from 'src/fetch/fetchapi';
interface filedata {
  name: string;
  path: string;
  size: number;
  lastModified?: string;
  modified?: string;
  status?: string;
}
const fetchServers = async () => {
  try {
    const serversfetch = await serverapi.getServers();
    return serversfetch.data.files;
  } catch (error) {
    console.error("Error fetching servers:", error);
    return []; // Retorna un array vacío en caso de error
  }
};

const mapedServers = (await fetchServers()).map((server: filedata) => ({
  id: server.name,
  name: server.name,
  size: server.size,
  lastModified: server.lastModified || server.modified,
  status: server.status || 'stopped',
}));
const servers: Server[] = mapedServers;

// Métricas del sistema
const systemMetrics: SystemMetrics = {
  cpu: 45,
  memory: 72,
  network: 38,
  totalServers: 2,
  activeServers: 0,
  lastBackup: 'Never'
};

// Acciones rápidas
const quickActions: QuickAction[] = [
  { name: 'Documentation', icon: 'description', link: '#' },
  { name: 'Support', icon: 'support_agent', link: '#' },
  { name: 'Settings', icon: 'settings', link: '#' },
  { name: 'Tutorials', icon: 'school', link: '#' }
];
---

<Layout title="Server Overview - ServerManager">
<script src="/src/litcomponents/mcinit.ts"></script>
  <div class="app-container">
    
    <main>
      <!-- Tarjetas de estado del sistema -->
      <div class="dashboard-cards">
        <SystemStatus metrics={systemMetrics} />
        <ServerStatistics metrics={systemMetrics} />
        <QuickActions actions={quickActions} />
		
      </div>
      
      <!-- Alerta de rendimiento -->
      <PerformanceAlert />
      
      <!-- Lista de servidores -->
      <div class="servers-list">
        <a href="/new" class="btn btn-primary">
          <i class="fa-solid fa-plus"></i>
          New Server
        </a>
        {servers.map(server => (
          <ServerCard server={server} />
        ))}

      </div>
      
      <!-- Sección de salud del sistema -->
      <div class="system-section">
        <RecentBackups />
		
        <SystemHealth />
      </div>
    </main>
  </div>
  <script define:vars={{mapedServers }}>
    console.log("serversfetch", mapedServers);
  </script>
</Layout>

<style>
  .app-container {
    min-height: 100vh;
    background-color: var(--color-dark-950);
  }

  .dashboard-cards {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-6);
    margin-bottom: var(--space-8);
  }
  
  .servers-list {
    margin-bottom: var(--space-8);
  }
  
  .system-section {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-6);
  }
  
  @media (min-width: 768px) {
    .system-section {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  @media (min-width: 1024px) {
    .dashboard-cards {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style>