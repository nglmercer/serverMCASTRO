---

import Layout from '@layouts/Layout.astro';
import SystemStatus from '@components/main/SystemStatus.astro';
import ServerStatistics from '@components/main/ServerStatistics.astro';
import QuickActions from '@components/main/QuickActions.astro';
import PerformanceAlert from '@components/main/PerformanceAlert.astro';
import RecentBackups from '@components/main/RecentBackups.astro';
import SystemHealth from '@components/main/SystemHealth.astro';
import ServerCard from '@components/main/ServerCard.astro';
import type { SystemMetrics, QuickAction } from '../types/server';

// Métricas del sistema
const systemMetrics: SystemMetrics = {
  cpu: 45,
  memory: 72,
  network: 38,
  totalServers: 2,
  activeServers: 0,
  lastBackup: 'Never'
};

// Acciones rápidas
const quickActions: QuickAction[] = [
  { name: 'Documentation', icon: 'description', link: '#' },
  { name: 'Support', icon: 'support_agent', link: '#' },
  { name: 'Settings', icon: 'settings', link: '#' },
  { name: 'Tutorials', icon: 'school', link: '#' }
];
---

<Layout title="Server Overview - ServerManager">
<script src="/src/litcomponents/mcinit.ts"></script>
  <div class="app-container">
    
    <main>
      <!-- Tarjetas de estado del sistema -->
      <div class="dashboard-cards">
        <SystemStatus metrics={systemMetrics} />
        <ServerStatistics metrics={systemMetrics} />
        <QuickActions actions={quickActions} />
		
      </div>
      
      <!-- Alerta de rendimiento -->
      <PerformanceAlert />
      
      <!-- Lista de servidores -->
      <div class="servers-list">
        <a href="/new" class="btn btn-primary">
          <i class="fa-solid fa-plus"></i>
          New Server
        </a>
          <ServerCard />

      </div>
      
      <!-- Sección de salud del sistema -->
      <div class="system-section">
        <RecentBackups />
		
        <SystemHealth />
      </div>
    </main>
  </div>
</Layout>

<style>
  .app-container {
    min-height: 100vh;
    background-color: var(--color-dark-950);
  }

  .dashboard-cards {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-6);
    margin-bottom: var(--space-8);
  }
  
  .servers-list {
    margin-bottom: var(--space-8);
  }
  
  .system-section {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-6);
  }
  
  @media (min-width: 768px) {
    .system-section {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  @media (min-width: 1024px) {
    .dashboard-cards {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  .server-card {
    background-color: var(--color-dark-900);
    border: 1px solid var(--color-gray-800);
    border-radius: var(--border-radius-xl);
    overflow: hidden;
    margin-bottom: var(--space-6);
  }
</style>
<script>
import { type EDetails } from 'src/litcomponents/mc/serveritem.js';
import { optionsModal, setPopupOptions } from 'src/utils/dropdown.js';
import { backupsapi } from 'src/fetch/fetchapi';
  const popup = document.getElementById('serverOptions');
  function initEDlisteners(){
    const allServerItems = document.querySelectorAll('server-item');
    console.log("allServerItems", allServerItems);
    if (!allServerItems) return;
    allServerItems.forEach(element => {
        element.addEventListener('selected', function(e) {
          if (!('detail' in e)) return;
          if (!(e instanceof CustomEvent)) return;
          window.location.href = `/console/?server=${e.detail.data.server}`;
        });
  
        element.addEventListener('menu', function(e) {
          if (!('detail' in e)) return;
          const detail = (e as CustomEvent).detail as EDetails;
          console.log("menu", detail);
          const popupOptions = getOptions(detail);
          setPopupOptions(popup, popupOptions, detail.event);
        });
      });
  }
  function getOptions({data}: EDetails) {
    // { prefix: '/backups' }
    const options = [
      {
        html: optionsModal({id:"create-backup",icon:"backup",text:"Create Backup"}),
        callback: function() {
          //post('/create',data);
          // data:{folderName,outputFilename?}
          console.log("Option 1 clicked",data);
          const backupdata = {
            folderName: data.server,
            serverName: data.server,
            outputFilename: data.server + '-backup-' + new Date().toISOString().slice(0, 19).replace(/:/g, '-')
          }
          backupsapi.createBackup(backupdata)
              .then(response => {
                console.log("Backup created successfully", response);
                // Optionally, you can refresh the page or update the UI
              })
              .catch(error => {
                console.error("Error creating backup", error);
              });
          }
      },
/*       {
        html: optionsModal({id:"restore-backup",icon:"restore",text:"Restore Backup"}),
        callback: function() {
          console.log("Option 2 clicked", data);
        }
        {
          html: optionsModal({id:"delete-server",icon:"delete",text:"Delete Server"}),
          callback: function() {
            console.log("Option 3 clicked",data);
          }
        },
        }, */
      {
        html: optionsModal({id:"download-server",icon:"download",text:"Download Server"}),
        callback: function() {
          console.log("Option 4 clicked",data);
        }
      },
    ]
    return options;
  }
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
      initEDlisteners();
      console.log("initEDlisteners");
    }, 1000);
  });
</script>