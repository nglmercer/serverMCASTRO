---
 
import ServerLayout from '@layouts/serverLayout.astro';
import SideBySideRow from '@components/Sidec.astro';
import ModSearch from '@components/store/ModSearch';
import FileUploader from "@components/solid/FileUploader.tsx";
import { urlbase } from 'src/config/url';
---
<script src="/src/litcomponents/mcinit.js"></script>
<ServerLayout title={"plugins"} activeConfig="A">
    <h2>Plugins and mods</h2>
        <div class="config-section">
            <SideBySideRow gap="20px" alignItems="center">
                <div slot="left" class="grid gap-10">
                    <div class="flex align-center gap-10">
                        <span>Mods</span>
                        <button class="dark-btn icon-only p-4" id="uploadItem_mod">
                            <span class="material-symbols-rounded">upload</span>
                        </button>
                    </div>
                    <plugins-ui class="mods" id="modList"></plugins-ui>
                </div>
                <div slot="right" class="grid  gap-10">
                    <div class="flex align-center gap-10">
                        <span>Plugins</span>
                        <button class="dark-btn icon-only p-4" id="uploadItem_plugin">
                            <span class="material-symbols-rounded">upload</span>
                        </button>
                    </div>
                    <plugins-ui class="plugins" id="pluginList"></plugins-ui>
                </div>
            </SideBySideRow>
            <ModSearch client:only="solid-js"/>
      </div>
</ServerLayout>
<dialog-container id="upload-files">
    <div class="modal__base p-10">
        <FileUploader client:only="solid-js" apiEndpoint={(urlbase+"/upload/files?pathType=servers")} multiple={true} />
    </div>
</dialog-container>
<script>
    import { filemanagerapi,pluginsapi } from "src/fetch/fetchapi.js";
    import { DialogContainer } from "src/litcomponents/custom-modal.js";
    import { pathSignal, signals,normalizePath } from "src/globalSignals";
    import { PluginsUI, type ToggleEventDetail, type DeleteEventDetail } from "src/litcomponents/mc/PluginsUI.js";
    const modList = document.getElementById("modList") as PluginsUI;
    const pluginList = document.getElementById("pluginList") as PluginsUI;
    interface PluginOrMod {
        name: string;
        path?: string;
        size?: number;
        type?: "plugin" | "mod";
        modified?: string;
    }
    document.addEventListener("DOMContentLoaded",async function () {
        initListener();
        fetchPluginandMods();
        modList.type = "mods";
        pluginList.type = "plugins";
        pluginList.elements = ["plugin1.jar", "plugin2.jar.dis", ];
        modList.elements = ["mod1.jar", "mod2.jar.dis"];
    });
    const getFILEPATH = (type:string,itemName:string) => {
        return `/${type}/${itemName}`;
    }
    async function initListener() {
        const EventNames = ["uploadItem_mod", "uploadItem_plugin"];
        EventNames.forEach((eventName) => {
            const element = document.getElementById(eventName) as HTMLButtonElement;
            if (eventName === "uploadItem_mod") pathSignal.value = window.selectedServer + "/mods";
            if (eventName === "uploadItem_plugin") pathSignal.value = window.selectedServer + "/plugins";
            if (element) {
                element.addEventListener("click", async (e) => {
                    console.log("EventName", eventName);
                    const uploadFiles = document.getElementById("upload-files") as DialogContainer;
                    uploadFiles.show();
                    console.log("uploadFiles", uploadFiles,pathSignal.value);
                }
            );
            }
        });
        const MPEList = ["toggle", "delete"];
        MPEList.forEach((eventName) => {
            modList.addEventListener(eventName, ((e: Event) => {
                const details = (e as CustomEvent).detail;
                if (eventName === "delete") {
                    DeteletePluginorMod(details,"mods")
                    return;
                }
                TogglePluginorMod(details,"mods")
            }) as EventListener);
            pluginList.addEventListener(eventName, ((e: Event) => {
                const details = (e as CustomEvent).detail;
                if (eventName === "delete") {
                    DeteletePluginorMod(details,"plugins")
                    return;
                }
                TogglePluginorMod(details,"plugins")
            }) as EventListener);
        });
    }

    async function TogglePluginorMod(data:ToggleEventDetail,type:string) {
        console.log("data", data, type);
        const result = await filemanagerapi.renameFile(window.selectedServer, getFILEPATH(type,data.item),data.newName);
        console.log("result", result);
    }
    async function DeteletePluginorMod(data:DeleteEventDetail,type:string) {
        const filePath = getFILEPATH(type,data.item);
        console.log("filePath", filePath, data);
        const result = await filemanagerapi.deleteFile(window.selectedServer, filePath);
        console.log("result", result);
        fetchPluginandMods();
    }
    async function fetchPluginandMods(){
        const plugins = await pluginsapi.getPlugins(window.selectedServer);
        const mods = await pluginsapi.getMods(window.selectedServer);
        console.log("plugins", plugins,returnArrayName(plugins.data));
        pluginList.elements = returnArrayName(plugins.data);
        modList.elements = returnArrayName(mods.data);
        console.log("mods", mods,returnArrayName(mods.data));
    }
    function returnArrayName(array: PluginOrMod[]): string[]{
        if (!array || !Array.isArray(array)) return [];
        const arrayName: string[] = [];
        array.forEach((item) => {
                arrayName.push(item.name);
        });
        return arrayName;
    }
</script>
<style>
    .dark-btn {
        width: min(100%, 40px);
        height: min(100%, 40px);
    }
    
</style>