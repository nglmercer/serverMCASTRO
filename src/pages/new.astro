---
import Layout from '../layouts/Layout.astro';
import StepForm from '@components/newserver/StepForm.astro'
import Step1 from '@components/newserver/steps/Step1.astro';
import Step2 from '@components/newserver/steps/Step2.astro';
import Step3 from '@components/newserver/steps/Step3.astro';
const steps = [
 { name: "Nombre del servidor", value: "server-name" },
 { name: "Seleccionar núcleo del servidor", value: "server-core" },
 { name: "Configuración Final", value: "final-config" }
];
---
<Layout>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="/materialSymbols.css"/>
<link rel="stylesheet" href="/src/components/newserver/steps/step.css">
<script src="/src/components/newserver/newserver.js"></script>
<task-notifications id="notificaciones"></task-notifications>
<StepForm steps={steps} title="Crear un nuevo Servidor de Minecraft">
<Step1 />
<Step2 />
<Step3 />
</StepForm>
</Layout>
<script>
import generateNewServerStart from "@components/newserver/startscript";
import { type TabButtonData } from "src/types/elements";
import { serverapi } from "src/fetch/fetchapi";
import { tabsSignal,signals } from "src/globalSignals";
import { CInput } from "src/litcomponents/CInput";

const formElemNames = [
  "serverName",
  "selecttab",
  "coreName",
  "coreVersion",
  "fileName",
  "javaVersion",
  "Ramsize",
  "serverPort",
  "optiflags"
];

const formElements: Element[] = [];
const formOBJ: Record<string, any> = {};

// Función para establecer valores en formOBJ
function setValue(id: string, value: any) {
  formOBJ[id] = value;
}

// Función para configurar listeners en elementos
function setListeners(element: Element, id: string) {
  element.addEventListener('change', (e) => {
    const data = (e as CustomEvent).detail;
    console.log(data);
    if (!data || !data.value) return;
    setValue(id, data.value);
  });
}
function getFileForm(id: string) {
  const inputFile = document.getElementById(id) as CInput;
  const fileInput = inputFile.shadowRoot?.querySelector('input');
  return fileInput?.files?.[0] || null;
}
// Inicializar elementos y configurar listeners
formElemNames.forEach((id) => {
  const element = document.getElementById(id);
  if (!element) {
    console.warn(`Elemento con ID '${id}' no encontrado`);
    return;
  }
  
  formElements.push(element);
  
  // Verifica si el elemento tiene la propiedad 'value' antes de usarla
  if ('value' in element) {
    setValue(id, (element as any).value);
  }
  
  setListeners(element, id);
});

// Manejador del evento de envío del formulario
document.addEventListener('formSubmit', async function(e) {
  formElemNames.forEach((id) => {
    const element = document.getElementById(id);
    if (!element) return;
    if ('value' in element) {
      setValue(id, (element as any).value);
    }
  });
  
  //startParameters is optimization === default string if (optiflags)
  formOBJ.startParameters = generateNewServerStart(formOBJ.Ramsize, formOBJ.optiflags);
  console.log(formOBJ);
  console.log(formElements);
  
  // Crear un nuevo FormData
  const formData = new FormData();
  
  // Añadir todos los campos del formulario
  Object.entries(formOBJ).forEach(([key, value]) => {
    if (key !== 'fileName') { // Omitir el campo del nombre del archivo
      formData.append(key, String(value));
    }
  });
  
  // Añadir el archivo
  const file = getFileForm("fileName");
  if (file) {
    formData.append("file", file);
  }
  
  try {
    // Enviar el FormData al servidor
    const result = await serverapi.postNewserver(formData);
    console.log(result);
  } catch (error) {
    console.error("Error al enviar el formulario:", error);
  }
});
/*
  const { index, item } = tabsSignal.value as TabButtonData;
  console.log(index, item);
*/
signals.subscribe('tabs', (value, oldValue) => {
  console.log(`Counter cambió`,value,oldValue);
});

</script>