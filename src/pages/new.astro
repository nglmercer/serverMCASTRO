---
import Layout from '../layouts/Layout.astro';
import StepForm from '@components/newserver/StepForm.astro'
import Step1 from '@components/newserver/steps/Step1.astro';
import Step2 from '@components/newserver/steps/Step2.astro';
import Step3 from '@components/newserver/steps/Step3.astro';
import NotificationContent from '@components/solid/modal/NotificationContent';
const steps = [
 { name: "Nombre del servidor", value: "server-name" },
 { name: "Seleccionar núcleo del servidor", value: "server-core" },
 { name: "Configuración Final", value: "final-config" }
];
---
<Layout>
  <div class="home-link absolute top-0 right-0 p-4">
    <span class="material-symbols-rounded">
      <a href="/">home</a>
    </span>
  </div>
<link rel="stylesheet" href="/src/components/newserver/steps/step.css">
<script src="/src/components/newserver/newserver.js"></script>
<dialog-container id="notificationDialog">
  <NotificationContent
  client:load
  id="notificationContent"
  initialState={{
    type: 'info',
    title: 'Bienvenido!',
    message: 'El sistema está listo.',
  }}
/>
</dialog-container>
<StepForm steps={steps} title="Crear un nuevo Servidor de Minecraft">
<Step1 />
<Step2 />
<Step3 />
</StepForm>
</Layout>
<script>
import generateNewServerStart from "@components/newserver/startscript";
import { type TabButtonData } from "src/types/elements";
import { serverapi } from "src/utils/fetch/fetchapi";
import { tabsSignal,signals } from "src/globalSignals";
import { CInput } from "src/litcomponents/CInput";
import type { DialogContainer } from "src/litcomponents/custom-modal";
import type { NotificationControls } from 'src/types/Notification';

const notifications = document.querySelector("task-notifications");
const formElemNames = [
  "serverName",
  "selecttab",
  "coreName",
  "coreVersion",
  "fileName",
  "javaVersion",
  "Ramsize",
  "serverPort",
  "optiflags"
];

const formElements: Element[] = [];
const formOBJ: Record<string, any> = {};

// Función para establecer valores en formOBJ
function setValue(id: string, value: any) {
  formOBJ[id] = value;
}

// Función para configurar listeners en elementos
function setListeners(element: Element, id: string) {
  element.addEventListener('change', (e) => {
    const data = (e as CustomEvent).detail;
    console.log(data);
    if (!data || !data.value) return;
    setValue(id, data.value);
  });
}
function getFileForm(id: string) {
  const inputFile = document.getElementById(id) as CInput;
  const fileInput = inputFile.shadowRoot?.querySelector('input');
  return fileInput?.files?.[0] || null;
}


// Inicializar elementos y configurar listeners
formElemNames.forEach((id) => {
  const element = document.getElementById(id);
  if (!element) {
    console.warn(`Elemento con ID '${id}' no encontrado`);
    return;
  }
  
  formElements.push(element);
  
  // Verifica si el elemento tiene la propiedad 'value' antes de usarla
  if ('value' in element) {
    setValue(id, (element as any).value);
  }
  
  setListeners(element, id);
});

// Manejador del evento de envío del formulario
document.addEventListener('formSubmit', async function(e) {
  formElemNames.forEach((id) => {
    const element = document.getElementById(id);
    if (!element) return;
    if ('value' in element) {
      setValue(id, (element as any).value);
    }
  });
  
  //startParameters is optimization === default string if (optiflags)
  formOBJ.startParameters = generateNewServerStart(formOBJ.Ramsize, formOBJ.optiflags);
  console.log(formOBJ);
  console.log(formElements);
  const formData = new FormData();
  // Crear un nuevo FormData
  
  // Añadir todos los campos del formulario
  formData.append("jsonData", JSON.stringify(formOBJ));
  
  // Añadir el archivo
  const file = getFileForm("fileName");
  if (file && tabsSignal.value.index === 1) {
    formData.append("file", file);
  }
  
  try {
    // Enviar el FormData al servidor
    const result = await serverapi.postNewserver(formData);
    console.log(result);
    if (result || result?.success) {
      showDialogWithMessage(notifier => {
          notifier.setType('success', (result.message ? result.message : 'La operación fue un éxito rotundo.'), '¡Completado!');
          notifier.addButton({
          text: `Go ${formOBJ.serverName}`,
          class: 'primary',
          onClick: () => {
            // Redireccionar a página de detalles
            window.location.href = '/console/?server=' + (formOBJ.serverName || window.selectedServer || '');
          }
        });
        });
    } else {
      showDialogWithMessage(notifier => {
          notifier.setType('error', ('Error al enviar el formulario: ' + result?.error), 'Error');
        });
    }
  } catch (error) {
    console.error("Error al enviar el formulario:", error);
  }
});
/*
  const { index, item } = tabsSignal.value as TabButtonData;
  console.log(index, item);
*/

signals.subscribe('tabs', (value:TabButtonData, oldValue:TabButtonData) => {
  const { index } = value;
  if (index === 1) {
    const element = document.getElementById("coreVersion")
    console.log(`tabs cambió`,{value,oldValue},formOBJ, element);
        if (element && 'Values' in element) {
          element.Values = null;
          formOBJ.coreVersion = null;
        }

  }
});
const dialog = document.getElementById('notificationDialog') as DialogContainer;
function getNotifierApi(id:string) {
      return new Promise((resolve, reject) => {
        let attempts = 0;
        const maxAttempts = 50; // ~5 segundos
        const interval = setInterval(() => {
          if (window.astroAppNotifications && window.astroAppNotifications[id]) {
            clearInterval(interval);
            resolve(window.astroAppNotifications[id]);
          } else if (attempts++ > maxAttempts) {
            clearInterval(interval);
            reject(new Error(`API para el notificador con ID '${id}' no encontrada tras ${maxAttempts} intentos.`));
          }
        }, 100);
      });
    }
async function showDialogWithMessage(action: (notifier: NotificationControls) => void) {
    const idcontent = 'notificationContent';
    const notifier = await getNotifierApi(idcontent);
    if (!notifier) {
      console.error(`La API de notificación (window. ${idcontent}) no está disponible`);
      return;
    }
    await action(notifier as NotificationControls);
    if (dialog && typeof dialog.show === 'function') {
      dialog.show();
    }

}
document.addEventListener('DOMContentLoaded', () => {
/*   setTimeout(() => {
    showDialogWithMessage(notifier => {
        notifier.setType('success', 'La operación fue un éxito rotundo.', '¡Conseguido!');
      });
      showDialogWithMessage(notifier => {
        notifier.setIcon('pets'); // Cambia solo el icono, el tipo y color se mantienen
        notifier.setTitle('Mascota Encontrada'); // También actualizamos título para que tenga sentido
        notifier.setMessage('¡Nuevo mascota encontrada!');
        notifier.setType('info');
        notifier.addButton({
          text: 'Cerrar',
          class: 'btn btn-danger',
          onClick: () => {
            // Lógica para cerrar la notificación
            console.log('Notificación cerrada');
            notifier.removeAllButtons();
          }
        });
        //notifier.addButton siempre se muestra los anteriores (notifier.removeAllButtons() para quitarlos)
      });
  }, 1000); */
  
});
</script>